// Jenkins Pipeline for DevOps CI/CD Project
// Fixed version with node context and defined missing env vars

pipeline {
    agent any

    environment {
        // Azure credentials from Jenkins Credentials
        ARM_SUBSCRIPTION_ID = credentials('azure-subscription-id')
        ARM_CLIENT_ID       = credentials('azure-client-id')
        ARM_CLIENT_SECRET   = credentials('azure-client-secret')
        ARM_TENANT_ID       = credentials('azure-tenant-id')

        // Project configuration
        PROJECT_NAME  = 'devops-cicd'
        TERRAFORM_DIR = 'terraform'
        APP_DIR       = 'app'
        TF_VERSION    = '1.6.0'

        // Default environment variables
        ENVIRONMENT   = 'dev'      // can be 'dev', 'staging', or 'production'
        BUILD_DOCKER  = 'false'    // set to 'true' to enable Docker build
    }

    options {
        buildDiscarder(logRotator(numToKeepStr: '10'))
        timeout(time: 30, unit: 'MINUTES')
        timestamps()
        disableConcurrentBuilds()
    }

    stages {
        stage('üîç Initialization') {
            steps {
                echo "========================================="
                echo "  DevOps CI/CD Pipeline Started"
                echo "========================================="
                echo "Build Number: ${env.BUILD_NUMBER}"
                echo "Job Name: ${env.JOB_NAME}"
                echo "Workspace: ${env.WORKSPACE}"
                echo "Environment: ${env.ENVIRONMENT}"
            }
        }

        stage('üì¶ Checkout Code') {
            steps {
                echo "Checking out code from repository..."
                checkout scm
                sh '''
                    echo "Git Commit Information:"
                    git log -1 --pretty=format:"Commit: %h%nAuthor: %an%nDate: %ad%nMessage: %s" --date=short
                '''
            }
        }

        stage('üîß Install Dependencies') {
            steps {
                echo "Installing Terraform..."
                sh '''
                    if ! command -v terraform &> /dev/null; then
                        wget -q https://releases.hashicorp.com/terraform/${TF_VERSION}/terraform_${TF_VERSION}_linux_amd64.zip
                        unzip -q terraform_${TF_VERSION}_linux_amd64.zip
                        sudo mv terraform /usr/local/bin/
                        rm terraform_${TF_VERSION}_linux_amd64.zip
                    fi
                    terraform version
                '''
            }
        }

        stage('‚úÖ Validate Configuration') {
            steps {
                dir("${TERRAFORM_DIR}") {
                    sh '''
                        terraform fmt -check -recursive || echo "Formatting warnings"
                        terraform init -input=false
                        terraform validate
                    '''
                }
            }
        }

        stage('üìã Terraform Plan') {
            steps {
                dir("${TERRAFORM_DIR}") {
                    sh '''
                        terraform plan -input=false -out=tfplan -var-file=terraform.tfvars
                        terraform show -no-color tfplan > plan_output.txt
                        cat plan_output.txt
                    '''
                }
            }
        }

        stage('üöÄ Terraform Apply') {
            when {
                anyOf { branch 'main'; branch 'master' }
            }
            steps {
                dir("${TERRAFORM_DIR}") {
                    sh '''
                        terraform apply -input=false -auto-approve tfplan
                        terraform output -json > outputs.json
                        terraform output > outputs.txt
                    '''
                }
            }
        }

        stage('üì¶ Build Application') {
            steps {
                dir("${APP_DIR}") {
                    sh '''
                        if [ -f requirements.txt ]; then
                            pip3 install -r requirements.txt || echo "Dependency install failed"
                        fi
                        if [ -f app.py ]; then
                            python3 -m py_compile app.py
                            echo "Python app validated"
                        fi
                    '''
                }
            }
        }

        stage('üê≥ Docker Build (Optional)') {
            when { environment name: 'BUILD_DOCKER', value: 'true' }
            steps {
                dir("${APP_DIR}") {
                    sh '''
                        docker build -t ${PROJECT_NAME}:${BUILD_NUMBER} .
                        docker tag ${PROJECT_NAME}:${BUILD_NUMBER} ${PROJECT_NAME}:latest
                        docker images | grep ${PROJECT_NAME}
                    '''
                }
            }
        }

        stage('üåê Deploy Application') {
            steps {
                dir("${TERRAFORM_DIR}") {
                    script {
                        def publicIP = sh(script: "terraform output -raw public_ip_address || echo '0.0.0.0'", returnStdout: true).trim()
                        echo "Public IP: ${publicIP}"

                        writeFile file: 'deployment_info.txt', text: """
Deployment Info
=================
Build: ${env.BUILD_NUMBER}
Date: ${new Date()}
Public IP: ${publicIP}
URL: http://${publicIP}
"""
                    }
                }
            }
        }

        stage('üìä Generate Report') {
            steps {
                sh '''
                    mkdir -p reports
                    cat > reports/deployment_report.html << 'EOF'
<!DOCTYPE html>
<html>
<head>
  <title>Deployment Report</title>
  <style>
    body { font-family: Arial, sans-serif; margin: 40px; }
    h1 { color: #667eea; }
    .info { background: #f3f4f6; padding: 20px; border-radius: 8px; margin: 20px 0; }
    .success { color: #10b981; font-weight: bold; }
  </style>
</head>
<body>
  <h1>üöÄ Deployment Report</h1>
  <div class="info">
    <p><strong>Status:</strong> <span class="success">SUCCESS</span></p>
    <p><strong>Build Number:</strong> ${BUILD_NUMBER}</p>
    <p><strong>Date:</strong> ${new Date()}</p>
    <p><strong>Project:</strong> ${PROJECT_NAME}</p>
  </div>
</body>
</html>
EOF
                '''
            }
        }
    }

    post {
        always {
            node {
                echo "Cleaning workspace..."
                sh '''
                    rm -f terraform/tfplan
                    rm -f terraform/*.tfvars 2>/dev/null || true
                    echo "Cleanup done"
                '''
            }
        }

        success {
            echo "‚úÖ Pipeline Completed Successfully!"
            archiveArtifacts artifacts: 'terraform/outputs.txt,terraform/deployment_info.txt,reports/*.html', allowEmptyArchive: true
        }

        failure {
            echo "‚ùå Pipeline Failed. Check logs."
        }
    }
}
